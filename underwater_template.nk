set cut_paste_input [stack 0]
version 14.0 v5
BackdropNode {
 inputs 0
 name Backdrop_Adjust20
 tile_color 0x4e646800
 label "<p align=\"\[value align]\"><font color=\[value note_color]> \[if \{\[value bold]==true\} \{return <b>\} \{return \"\"\}] \[if \{\[value italian]==true\} \{return <i>\} \{return \"\"\}] \[if \{\[value under]==true\} \{return <u>\} \{return \"\"\}] \[if \{\[value strike]==true\} \{return <s>\} \{return \"\"\}] \[value note]"
 note_font "MS Shell Dlg 2"
 note_font_size 112
 selected true
 xpos -1663
 ypos -2755
 bdwidth 3546
 bdheight 5414
 addUserKnob {20 User}
 addUserKnob {22 cover l "<big><font color=yellow>Cover Selected Area</big></font>" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.coverSelectedArea()" +STARTLINE}
 addUserKnob {26 _1 l "" -STARTLINE T "   "}
 addUserKnob {22 extend l "<big><font color=yellow>Extend to Selected Area</big></font>" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.extendSelectedArea()"}
 addUserKnob {26 label_1 l <b>Label</b>}
 addUserKnob {43 note l Note}
 note "UNDERWATER LOOK"
 addUserKnob {4 note_color l "Note Color" M {Orange White Silver Gray Black Red Maroon Yellow Olive Lime Green Aqua Teal Blue Navy Fuchsia Purple}}
 note_color Navy
 addUserKnob {4 align l Align -STARTLINE M {Center Left Right "" "" ""}}
 addUserKnob {6 bold l "<b>&nbsp;&nbsp;T" +STARTLINE}
 bold true
 addUserKnob {6 italian l "&nbsp;&nbsp;<i>T" -STARTLINE}
 italian true
 addUserKnob {6 under l "&nbsp;&nbsp;<u>T" -STARTLINE}
 addUserKnob {6 strike l "&nbsp;&nbsp;<s>T" -STARTLINE}
 addUserKnob {26 font_size l "Note size"}
 addUserKnob {22 size_plus_10 l "<font color=orange>▲ 10</font>" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.fontPlusTen()"}
 addUserKnob {22 size_min_10 l "<font color=aqua>▼ 10</font>" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.fontMinusTen()"}
 addUserKnob {26 tasks l <b>Tasks</b>}
 addUserKnob {22 plate l "<big><font style=\"background-color:#559d63;\">&nbsp;<font color=black>Plate</font>&nbsp;" T "# plate\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1436110080)\nbd\['note'].setValue('PLATE')\nbd\['note_font_size'].setValue(102)\nbd\['note_color'].setValue('Black')" +STARTLINE}
 addUserKnob {22 denoise l "<big><font style=\"background-color:#85994d;\">&nbsp;<font color=black>Denoise</font>&nbsp;" -STARTLINE T "# denoise\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(2241416448)\nbd\['note'].setValue('DENOISE')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')"}
 addUserKnob {22 reference l "<big><font style=\"background-color:#4d9976;\">&nbsp;<font color=black>Reference</font>&nbsp;" -STARTLINE T "# reference\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1301902848)\nbd\['note'].setValue('REF')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')"}
 addUserKnob {22 precomp l "<big><font style=\"background-color:#994d63;\">&nbsp;<font color=black>Precomp</font>&nbsp;" T "# precomp\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(2571985664)\nbd\['note'].setValue('PRECOMP')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')" +STARTLINE}
 addUserKnob {22 merge l "<big><font style=\"background-color:#4d8c99;\">&nbsp;<font color=black>Merge</font>&nbsp;" -STARTLINE T "# merge\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1301059840)\nbd\['note'].setValue('MERGE')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')"}
 addUserKnob {22 output l "<big><font style=\"background-color:#997d4d;\">&nbsp;<font color=black>Output</font>&nbsp;" -STARTLINE T "# output\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(2575125760)\nbd\['note'].setValue('OUTPUT')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')"}
 addUserKnob {22 Foreground l "<big><font style=\"background-color:#777777;\">&nbsp;<font color=black>FG</font>&nbsp;" T "# fg\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1717987071)\nbd\['note'].setValue('FG')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')\n" +STARTLINE}
 addUserKnob {22 background l "<big><font style=\"background-color:#777777;\">&nbsp;<font color=black>BG</font>&nbsp;" -STARTLINE T "# background\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1717987071)\nbd\['note'].setValue('BG')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 versions l "<big><font style=\"background-color:#777777;\">&nbsp;<font color=black>Versions</font>&nbsp;" -STARTLINE T "# versions\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(1717987071)\nbd\['note'].setValue('VERSIONS')\nbd\['note_font_size'].setValue(82)\nbd\['note_color'].setValue('Black')"}
 addUserKnob {22 threed l "<big><font style=\"background-color:#806069;\">&nbsp;<font color=black>3D</font>&nbsp;" T "# 3d\n\nbd = nuke.thisNode()\nbd\['tile_color'].setValue(2153801984)\nbd\['note'].setValue('3D')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')\n" +STARTLINE}
 addUserKnob {22 camera l "<big><font style=\"background-color:#806060;\">&nbsp;<font color=black>Camera</font>&nbsp;" -STARTLINE T "# camera\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(2153799680)\nbd\['note'].setValue('CAMERA')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 track l "<big><font style=\"background-color:#80607d;\">&nbsp;<font color=black>Track</font>&nbsp;" -STARTLINE T "# track\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(2153807104)\nbd\['note'].setValue('TRACK')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 matte l "<big><font style=\"background-color:#807460;\">&nbsp;<font color=black>DMP</font>&nbsp;" T "# matte\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(2155110400)\nbd\['note'].setValue('DMP')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')" +STARTLINE}
 addUserKnob {22 grade l "<big><font style=\"background-color:#607a80;\">&nbsp;<font color=black>Grade</font>&nbsp;" -STARTLINE T "# grade\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(1618640896)\nbd\['note'].setValue('GRADE')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')\n"}
 addUserKnob {22 lens_effect l "<big><font style=\"background-color:#6d6080;\">&nbsp;<font color=black>Lens Effect</font>&nbsp;" -STARTLINE T "# lens effect\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(1835040768)\nbd\['note'].setValue('LENS\\nEFFECT')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 key l "<big><font style=\"background-color:#608071;\">&nbsp;<font color=black>Key</font>&nbsp;" T "# key\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(1619030272)\nbd\['note'].setValue('KEY')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')" +STARTLINE}
 addUserKnob {22 roto l "<big><font style=\"background-color:#638060;\">&nbsp;<font color=black>Roto</font>&nbsp;" -STARTLINE T "# roto\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(1669357568)\nbd\['note'].setValue('ROTO')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 prep l "<big><font style=\"background-color:#778060;\">&nbsp;<font color=black>Prep</font>&nbsp;" -STARTLINE T "# prep\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(2004901888)\nbd\['note'].setValue('PREP')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('Silver')"}
 addUserKnob {22 grain l "<big><font style=\"background-color:#AAAAAA;\">&nbsp;<font color=black>Grain</font>&nbsp;" -STARTLINE T "# grain\n\nbd = nuke.thisNode()\n\nbd\['tile_color'].setValue(2576980479)\nbd\['note'].setValue('GRAIN')\nbd\['note_font_size'].setValue(72)\nbd\['note_color'].setValue('White')"}
 addUserKnob {26 node_color l "<b>Node Color</b>"}
 addUserKnob {22 change_colors l "<big><font style=\"background-color:#806060;\">D<font style=\"background-color:#807460;\">u<font style=\"background-color:#778060;\">l<font style=\"background-color:#608071;\">l<font style=\"background-color:#607a80;\"> <font style=\"background-color:#606680;\">C<font style=\"background-color:#606680;\">o<font style=\"background-color:#6d6080;\">l<font style=\"background-color:#80607d;\">o<font style=\"background-color:#806069;\">r<font style=\"background-color:#806060;\">s" t "By clicking on it can toggle between the \"Dull Colors\" and the \"Vivid Colors\" palettes" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.dullVividColor()" +STARTLINE}
 addUserKnob {22 darken l "<big><font style=\"background-color:#333333;\">&nbsp;<font color=#cccccc>Darken</font>&nbsp;" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.darkenTileColor()"}
 addUserKnob {22 brighten l "<big><font style=\"background-color:#aaaaaa;\">&nbsp;<font color=black>Brighten</font>&nbsp;" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.brightenTileColor()"}
 addUserKnob {22 color_0 l "<font color=#806060><big>█</big></font>" T "nuke.thisNode()\['tile_color'].setValue(2153799680)" +STARTLINE}
 addUserKnob {22 color_1 l "<font color=#807460><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(2155110400)"}
 addUserKnob {22 color_2 l "<font color=#778060><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(2004901888)"}
 addUserKnob {22 color_3 l "<font color=#638060><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1669357568)"}
 addUserKnob {22 color_4 l "<font color=#608071><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1619030272)"}
 addUserKnob {22 color_5 l "<font color=#607a80><big>█</big></font>" T "nuke.thisNode()\['tile_color'].setValue(1618640896)" +STARTLINE}
 addUserKnob {22 color_6 l "<font color=#606680><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1617330176)"}
 addUserKnob {22 color_7 l "<font color=#6d6080><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1835040768)"}
 addUserKnob {22 color_8 l "<font color=#80607d><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(2153807104)"}
 addUserKnob {22 color_9 l "<font color=#806069><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(2153801984)"}
 addUserKnob {22 grey_1 l "<font color=#DDDDDD><big>█</big></font>" T "nuke.thisNode()\['tile_color'].setValue(3149642751)" +STARTLINE}
 addUserKnob {22 grey_2 l "<font color=#AAAAAA><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(2576980479)"}
 addUserKnob {22 grey_3 l "<font color=#777777><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1717987071)"}
 addUserKnob {22 grey_4 l "<font color=#333333><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(1145324799)"}
 addUserKnob {22 grey_5 l "<font color=#222222><big>█</big></font>" -STARTLINE T "nuke.thisNode()\['tile_color'].setValue(572662527)"}
 addUserKnob {20 re_size l "Re Size" n 1}
 re_size 0
 addUserKnob {26 upscale l Upscale}
 addUserKnob {22 upleft500 l "<font color=yellow><big>↖" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upleft500()" +STARTLINE}
 addUserKnob {22 space1 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 up500 l "<font color=yellow><h3>▲" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.up500()"}
 addUserKnob {22 space1_1 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 upright500 l "<font color=yellow><big>↗" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upright500()"}
 addUserKnob {22 space2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" +STARTLINE}
 addUserKnob {22 upleft100 l "<font color=orange><big>↖" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upleft100()"}
 addUserKnob {22 up100 l "<font color=orange><big>▲" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.up100()"}
 addUserKnob {22 upright100 l "<font color=orange><big>↗" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upright100()"}
 addUserKnob {22 space2_1 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 left500 l "<font color=yellow><big>&nbsp;◄" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.left500()" +STARTLINE}
 addUserKnob {22 left100 l "<font color=orange><big>◄" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.left100()"}
 addUserKnob {22 center1 l "<font color=crimson><big>⦿" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.center()"}
 addUserKnob {22 right100 l "<font color=orange><big>►" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.right100()"}
 addUserKnob {22 right500 l "<font color=yellow><big>►&nbsp;" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.right500()"}
 addUserKnob {22 space3 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" +STARTLINE}
 addUserKnob {22 downleft100 l "<font color=orange><big>↙" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downleft100()"}
 addUserKnob {22 down100 l "<font color=orange><big>▼" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.down100()"}
 addUserKnob {22 downright100 l "<font color=orange><big>↘" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downright100()"}
 addUserKnob {22 space3_1 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 downleft500 l "<font color=yellow><big>↙" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downleft500()" +STARTLINE}
 addUserKnob {22 space4 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 down500 l "<font color=yellow><big>▼" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.down500()"}
 addUserKnob {22 space4_1 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 downright500 l "<font color=yellow><big>↘" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downright500()"}
 addUserKnob {26 downscale l Downscale}
 addUserKnob {22 upleft500_2 l "<font color=LightSkyBlue><big>↘" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upleft500_2()" +STARTLINE}
 addUserKnob {22 space1_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 up500_2 l "<font color=LightSkyBlue><h3>▼" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.up500_2()"}
 addUserKnob {22 space1_1_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 upright500_2 l "<font color=LightSkyBlue><big>↙" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upright500_2()"}
 addUserKnob {22 space2_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" +STARTLINE}
 addUserKnob {22 upleft100_2 l "<font color=SteelBlue><big>↘" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upleft100_2()"}
 addUserKnob {22 up100_2 l "<font color=SteelBlue><big>▼" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.up100_2()"}
 addUserKnob {22 upright100_2 l "<font color=SteelBlue><big>↙" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.upright100_2()"}
 addUserKnob {22 space2_1_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 left500_2 l "<font color=LightSkyBlue><big>&nbsp;►" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.left500_2()" +STARTLINE}
 addUserKnob {22 left100_2 l "<font color=SteelBlue><big>►" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.left100_2()"}
 addUserKnob {22 center1_2 l "<font color=blue><big>⦿" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.center_2()"}
 addUserKnob {22 right100_2 l "<font color=SteelBlue><big>◄" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.right100_2()"}
 addUserKnob {22 right500_2 l "<font color=LightSkyBlue><big>◄&nbsp;" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.right500_2()"}
 addUserKnob {22 space3_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" +STARTLINE}
 addUserKnob {22 downleft100_2 l "<font color=SteelBlue><big>↗" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downleft100_2()"}
 addUserKnob {22 down100_2 l "<font color=SteelBlue><big>▲" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.down100_2()"}
 addUserKnob {22 downright100_2 l "<font color=SteelBlue><big>↖" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downright100_2()"}
 addUserKnob {22 space3_1_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 downleft500_2 l "<font color=LightSkyBlue><big>↗" T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downleft500_2()" +STARTLINE}
 addUserKnob {22 space4_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 down500_2 l "<font color=LightSkyBlue><big>▲" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.down500_2()"}
 addUserKnob {22 space4_1_2 l "<big>&nbsp;&nbsp;&nbsp;&nbsp;" -STARTLINE}
 addUserKnob {22 downright500_2 l "<font color=LightSkyBlue><big>↖" -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.downright500_2()"}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {26 TEXT l "" -STARTLINE T "<font color=#808080 size=\"5\" >1.8 version</font>"}
 addUserKnob {26 _2 l "" -STARTLINE T "   "}
 addUserKnob {22 info l Tutorial/Info -STARTLINE T "import Backdrop_Adjust_utils\n\nBackdrop_Adjust_utils.openWebsite()"}
 addUserKnob {26 HeadlineB l "" +STARTLINE T "<font color=#808080 size=\"2\">Backdrop_Adjust by Attila Gasparetz</font>"}
}
StickyNote {
 inputs 0
 name StickyNote6
 label "Orange\n8m"
 note_font_size 22
 selected true
 xpos -1030
 ypos -1994
}
StickyNote {
 inputs 0
 name StickyNote7
 label "Yellow\n15m"
 note_font_size 22
 selected true
 xpos -480
 ypos -1994
}
StickyNote {
 inputs 0
 name StickyNote10
 label "Blue\n35m"
 note_font_size 22
 selected true
 xpos 1060
 ypos -1994
}
StickyNote {
 inputs 0
 name StickyNote5
 label "Red\n5m"
 note_font_size 22
 selected true
 xpos -1470
 ypos -1994
}
StickyNote {
 inputs 0
 name StickyNote1
 tile_color 0xff0000ff
 label ______________RED______________
 note_font "DejaVu Sans"
 note_font_size 42
 selected true
 xpos -1519
 ypos -2090
}
StickyNote {
 inputs 0
 name StickyNote12
 tile_color 0x1fff00ff
 label ______________GREEN______________
 note_font "DejaVu Sans"
 note_font_size 42
 selected true
 xpos -556
 ypos -2090
}
StickyNote {
 inputs 0
 name StickyNote11
 tile_color 0x9fffff
 label ______________BLUE______________
 note_font "DejaVu Sans"
 note_font_size 42
 selected true
 xpos 452
 ypos -2066
}
StickyNote {
 inputs 0
 name StickyNote9
 label "Cyan\n30m"
 note_font_size 22
 selected true
 xpos 620
 ypos -1994
}
StickyNote {
 inputs 0
 name StickyNote8
 label "Green\n25m"
 note_font_size 22
 selected true
 xpos 70
 ypos -1994
}
Read {
 inputs 0
 file_type exr
 file /milk/jobs/surv/assets/reptCotylorhynchus/lookdev/work/skalomiris/houdini/pic/reptCotylorhynchusBTY/v004/reptCotylorhynchusBTY.%04d.exr
 format "3840 2160 0 0 3840 2160 1 UHD_4K"
 first 1001
 last 1072
 origfirst 1001
 origlast 1072
 origset true
 name Read5
 tile_color 0x19ff1901
 label "Version: \[lindex \[split \[value file] / ] 12 ]\n\n\[value width]x\[value height]\[expr \{\[value pixel_aspect] !=1 ? \" \[value pixel_aspect]:1\" :\"\"\}]\n\[value first]-\[value last]\n"
 selected true
 xpos 1500
 ypos -2684
}
Dot {
 name Dot2
 note_font_size 22
 selected true
 xpos 1534
 ypos -2502
}
set N1cfed900 [stack 0]
Dot {
 name Dot1
 note_font_size 22
 selected true
 xpos 1534
 ypos -2406
}
Dot {
 name Dot71
 note_font_size 22
 selected true
 xpos 1534
 ypos -2166
}
set Nff91b40 [stack 0]
Dot {
 name Dot9
 note_font_size 22
 selected true
 xpos 1754
 ypos -2166
}
set Nff96c00 [stack 0]
Constant {
 inputs 0
 channels rgb
 color 0.18
 name Constant2
 label "Res: \[value width] * \[value height]"
 selected true
 xpos 2380
 ypos -2414
}
Merge2 {
 inputs 2
 name Merge2
 selected true
 xpos 2380
 ypos -2169
}
push $Nff96c00
Dot {
 name Dot10
 note_font_size 22
 selected true
 xpos 1754
 ypos 2298
}
push $Nff91b40
Multiply {
 channels {-P.red -P.green -P.blue none}
 value 100
 name Multiply10
 label "Value: \[value value]"
 selected true
 xpos 1280
 ypos -2181
 disable true
}
Dot {
 name Dot201
 note_font_size 22
 selected true
 xpos 1094
 ypos -2166
}
set Nffca430 [stack 0]
Dot {
 name Dot202
 note_font_size 22
 selected true
 xpos 984
 ypos -2166
}
set Nffcf4b0 [stack 0]
Dot {
 name Dot341
 note_font_size 22
 selected true
 xpos 654
 ypos -2166
}
set Nffd4550 [stack 0]
Dot {
 name Dot342
 note_font_size 22
 selected true
 xpos 544
 ypos -2166
}
set Nffd95f0 [stack 0]
Dot {
 name Dot343
 note_font_size 22
 selected true
 xpos 104
 ypos -2166
}
set Nffde790 [stack 0]
Dot {
 name Dot344
 note_font_size 22
 selected true
 xpos -6
 ypos -2166
}
set Nffe37e0 [stack 0]
Dot {
 name Dot346
 note_font_size 22
 selected true
 xpos -446
 ypos -2166
}
set Nffe8a80 [stack 0]
Dot {
 name Dot347
 note_font_size 22
 selected true
 xpos -556
 ypos -2166
}
set Nffeda30 [stack 0]
add_layer {P P.red P.green P.blue P.x P.y P.z P.X P.Y P.Z P.alpha}
Group {
 name aPMatte_MAIN25
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xdfff00ff
 label "YELLOW\n15m\ndepth: \[value scaling.y]"
 selected true
 xpos -590
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{parent.aPMatte_MAIN20.radius}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.depth_mask_hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *15)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N1004c010 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N100a0750 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N100a0750
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N100c3410 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N100c3410
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N100faa50 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N1004c010
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N1011c950 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N100faa50
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N10153740 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N101587c0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N1015d880 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N10162b20 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N10167bc0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N10162b20
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N10167bc0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N101c2910 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N101dfa20 [stack 0]
push $N101c2910
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N105b72d0 [stack 0]
push $N101587c0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N105b72d0
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N1020f040 [stack 0]
push $N1015d880
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N102d72c0 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N102d72c0
push $N101dfa20
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N10422dc0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N1020f040
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N10422dc0
push $N1020f040
push $N10153740
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N1011c950
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N1117b0f0 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N1046c0c0 [stack 0]
push $N1117b0f0
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N10483030 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N100faa50
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N1022c140 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N10483030
push $N1046c0c0
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N1022c140
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert24
 selected true
 xpos -590
 ypos -1767
}
push $Nffe8a80
Group {
 name aPMatte_MAIN4
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xdfff00ff
 label "YELLOW\n15m\ndistance: \[value radius]"
 selected true
 xpos -480
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{"lerp (aPMatte_MAIN2.radius, UnderWater_proxy_BG.dist + 10, UnderWater_proxy_BG.layer_dist) "}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N102fa370 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N1042d8c0 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N1042d8c0
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N107343e0 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N107343e0
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N11273ae0 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N102fa370
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N1035f6d0 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N11273ae0
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N10409e20 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N1040eea0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N10413f60 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N10f1eb50 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N10f23bf0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N10f1eb50
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N10f23bf0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N103b5460 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N11188670 [stack 0]
push $N103b5460
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N111a22b0 [stack 0]
push $N1040eea0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N111a22b0
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N10d2e6e0 [stack 0]
push $N10413f60
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N1026aa40 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N1026aa40
push $N11188670
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N10abf140 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N10d2e6e0
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N10abf140
push $N10d2e6e0
push $N10409e20
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N1035f6d0
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N10ef9a30 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N10f19620 [stack 0]
push $N10ef9a30
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N10766710 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N11273ae0
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N107803e0 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N10766710
push $N10f19620
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N107803e0
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation {{ChannelMerge_MAIN_OP.operation}}
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge49
 selected true
 xpos -480
 ypos -1773
}
Invert {
 channels alpha
 name Invert6
 tile_color 0xdfff00ff
 selected true
 xpos -480
 ypos 201
}
set N1054afb0 [stack 0]
Dot {
 name Dot348
 note_font_size 22
 selected true
 xpos -446
 ypos 1842
}
push $Nffd95f0
Group {
 name aPMatte_MAIN23
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xffffff
 label "CYAN\n30m\ndepth: \[value scaling.y]"
 selected true
 xpos 510
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{parent.aPMatte_MAIN20.radius}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.depth_mask_hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *30)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N105d3e70 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N106273b0 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N106273b0
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N10699ed0 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N10699ed0
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N106d1240 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N105d3e70
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N106f3140 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N106d1240
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N111cb910 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N111d0990 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N111d5a50 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N111daaf0 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N111dfb90 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N111daaf0
 Shuffle {
  in {-P.red -P.green -P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N111dfb90
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N11238df0 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N110bcb00 [stack 0]
push $N11238df0
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N110d6820 [stack 0]
push $N111d0990
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N110d6820
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N1110df70 [stack 0]
push $N111d5a50
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N1112fb10 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N1112fb10
push $N110bcb00
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N10d9a8d0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N1110df70
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N10d9a8d0
push $N1110df70
push $N111cb910
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N106f3140
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N10de63e0 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N10e05bd0 [stack 0]
push $N10de63e0
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N10e1afa0 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N106d1240
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N10e34c70 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N10e1afa0
push $N10e05bd0
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N10e34c70
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert26
 selected true
 xpos 510
 ypos -1767
}
push $Nffd4550
Group {
 name aPMatte_MAIN6
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xffffff
 label "CYAN\n30m\ndistance: \[value radius]"
 selected true
 xpos 620
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{"lerp (aPMatte_MAIN2.radius, UnderWater_proxy_BG.dist + 25, UnderWater_proxy_BG.layer_dist) "}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N10fe5470 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N11038960 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N11038960
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N1105a550 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N1105a550
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N110918c0 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N10fe5470
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N112ca560 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N110918c0
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N11301240 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N113062c0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N1130b380 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N11310420 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N113154c0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N11310420
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N113154c0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N1136e720 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N1138b830 [stack 0]
push $N1136e720
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N113a54e0 [stack 0]
push $N113062c0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N113a54e0
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N113dc1b0 [stack 0]
push $N1130b380
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N113fe020 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N113fe020
push $N1138b830
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N1143e3a0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N113dc1b0
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N1143e3a0
push $N113dc1b0
push $N11301240
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N112ca560
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N10b0d990 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N10b2d180 [stack 0]
push $N10b0d990
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N10b42550 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N110918c0
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N10b5c220 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N10b42550
push $N10b2d180
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N10b5c220
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation {{ChannelMerge_MAIN_OP.operation}}
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge50
 selected true
 xpos 620
 ypos -1773
}
Invert {
 channels alpha
 name Invert5
 tile_color 0xffffff
 selected true
 xpos 620
 ypos -1143
}
set N10bf6f70 [stack 0]
Dot {
 name Dot349
 note_font_size 22
 selected true
 xpos 654
 ypos -1038
}
set N10c02eb0 [stack 0]
Dot {
 name Dot350
 note_font_size 22
 selected true
 xpos 654
 ypos -966
}
set N10c07f70 [stack 0]
Dot {
 name Dot351
 note_font_size 22
 selected true
 xpos 654
 ypos -822
}
set N10c0d010 [stack 0]
Dot {
 name Dot352
 note_font_size 22
 selected true
 xpos 654
 ypos 282
}
set N10c120b0 [stack 0]
Dot {
 name Dot353
 note_font_size 22
 selected true
 xpos 654
 ypos 1722
}
push $Nffeda30
Dot {
 name Dot354
 note_font_size 22
 selected true
 xpos -996
 ypos -2166
}
set N10c1c1f0 [stack 0]
Dot {
 name Dot355
 note_font_size 22
 selected true
 xpos -1106
 ypos -2166
}
set N10c21290 [stack 0]
Dot {
 name Dot356
 note_font_size 22
 selected true
 xpos -1436
 ypos -2166
}
set N10c26330 [stack 0]
Dot {
 name Dot357
 note_font_size 22
 selected true
 xpos -1546
 ypos -2166
}
Group {
 name aPMatte_MAIN20
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xff0000ff
 label "RED\n5m\ndepth: \[value scaling.y]"
 selected true
 xpos -1580
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius 10000
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *5)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N10c87670 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N10cdabb0 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N10cdabb0
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N10cfbfb0 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N10cfbfb0
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N107c1170 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N10c87670
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N107e3070 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N107c1170
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N10819d60 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N1081ede0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N10823ea0 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N10828f40 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N1082dfe0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N10828f40
 Shuffle {
  in {-P.red -P.green -P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N1082dfe0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N10887240 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N108a4350 [stack 0]
push $N10887240
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N108be070 [stack 0]
push $N1081ede0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N108be070
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N108f51c0 [stack 0]
push $N10823ea0
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N10917030 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N10917030
push $N108a4350
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N109573b0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N108f51c0
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N109573b0
push $N108f51c0
push $N10819d60
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N107e3070
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N109a2ec0 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N109c26b0 [stack 0]
push $N109a2ec0
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N109d7a80 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N107c1170
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N109f1750 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N109d7a80
push $N109c26b0
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N109f1750
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert22
 selected true
 xpos -1580
 ypos -1767
}
push $N10c26330
Group {
 name aPMatte_MAIN2
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xff0000ff
 label "RED\n5m\ndistance: \[value radius]"
 selected true
 xpos -1470
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{UnderWater_proxy_BG.dist}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N114b6d80 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N1150a2b0 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N1150a2b0
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N1152b890 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N1152b890
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N11562c90 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N114b6d80
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N11584b90 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N11562c90
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N115bd8b0 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N115c2930 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N115c79f0 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N115cca90 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N115d1b30 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N115cca90
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N115d1b30
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N1162ade0 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N11647ef0 [stack 0]
push $N1162ade0
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N11661c20 [stack 0]
push $N115c2930
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N11661c20
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N11698910 [stack 0]
push $N115c79f0
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N116ba7c0 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N116ba7c0
push $N11647ef0
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N116fc1e0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N11698910
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N116fc1e0
push $N11698910
push $N115bd8b0
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N11584b90
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N11747d50 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N11767450 [stack 0]
push $N11747d50
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N1177c830 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N11562c90
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N11796550 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N1177c830
push $N11767450
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N11796550
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation stencil
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge_MAIN_OP
 selected true
 xpos -1470
 ypos -1773
}
Invert {
 channels alpha
 name Invert8
 tile_color 0xff0000ff
 selected true
 xpos -1470
 ypos 1593
}
set N118310c0 [stack 0]
ChannelMerge {
 inputs 2
 operation stencil
 name ChannelMerge51
 selected true
 xpos -1470
 ypos 1707
}
ChannelMerge {
 inputs 2
 operation stencil
 name ChannelMerge52
 selected true
 xpos -1470
 ypos 1827
}
Dot {
 name Dot358
 note_font_size 22
 selected true
 xpos -1436
 ypos 1938
}
set N11857340 [stack 0]
Dot {
 name Dot359
 note_font_size 22
 selected true
 xpos -1436
 ypos 2058
}
push $N11857340
push $N118310c0
push $N10c21290
Group {
 name aPMatte_MAIN21
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xff5f00ff
 label "ORANGE\n8m\ndepth: \[value scaling.y]"
 selected true
 xpos -1140
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{parent.aPMatte_MAIN20.radius}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.depth_mask_hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *8)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N118be540 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N11911a20 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N11911a20
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N11933000 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N11933000
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N1196a400 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N118be540
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N1198c300 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N1196a400
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N119c3000 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N119c8080 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N119cd140 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N119d21e0 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N119d7280 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N119d21e0
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N119d7280
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N11a30530 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N11a4d640 [stack 0]
push $N11a30530
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N11a675f0 [stack 0]
push $N119c8080
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N11a675f0
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N11a9e560 [stack 0]
push $N119cd140
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N11ac0410 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N11ac0410
push $N11a4d640
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N11b00790 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N11a9e560
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N11b00790
push $N11a9e560
push $N119c3000
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N1198c300
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N11b4c2d0 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N11b6ba20 [stack 0]
push $N11b4c2d0
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N11b81e20 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N1196a400
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N11b9bb50 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N11b81e20
push $N11b6ba20
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N11b9bb50
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert23
 selected true
 xpos -1140
 ypos -1767
}
push $N10c1c1f0
Group {
 name aPMatte_MAIN3
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0xff5f00ff
 label "ORANGE\n8m\ndistance: \[value radius]"
 selected true
 xpos -1030
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{"lerp (aPMatte_MAIN2.radius, UnderWater_proxy_BG.dist + 3, UnderWater_proxy_BG.layer_dist) "}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N11c8c510 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N11cdfa50 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N11cdfa50
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N11d01010 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N11d01010
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N11d38400 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N11c8c510
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N11d5a270 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N11d38400
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N11d91020 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N11d960a0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N11d9b110 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N11da0200 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N11da52a0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N11da0200
 Shuffle {
  in {-P.red -P.green -P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N11da52a0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N11dfe560 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N11e1b670 [stack 0]
push $N11dfe560
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N11e35410 [stack 0]
push $N11d960a0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N11e35410
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N11e6c070 [stack 0]
push $N11d9b110
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N11e8df20 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N11e8df20
push $N11e1b670
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N11ece2b0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N11e6c070
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N11ece2b0
push $N11e6c070
push $N11d91020
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N11d5a270
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N11f19e20 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N11f39520 [stack 0]
push $N11f19e20
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N11f4e910 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N11d38400
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N11f68630 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N11f4e910
push $N11f39520
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N11f68630
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation {{ChannelMerge_MAIN_OP.operation}}
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge53
 selected true
 xpos -1030
 ypos -1773
}
Invert {
 channels alpha
 name Invert7
 tile_color 0xff5f00ff
 selected true
 xpos -1030
 ypos 1113
}
push $N10c120b0
push $N1054afb0
ChannelMerge {
 inputs 2
 operation stencil
 name ChannelMerge54
 selected true
 xpos -480
 ypos 267
}
Dot {
 name Dot360
 note_font_size 22
 selected true
 xpos -446
 ypos 402
}
set N1201c4b0 [stack 0]
Dot {
 name Dot361
 note_font_size 22
 selected true
 xpos -446
 ypos 498
}
set N120215a0 [stack 0]
Dot {
 name Dot362
 note_font_size 22
 selected true
 xpos -446
 ypos 642
}
push $N120215a0
push $N1201c4b0
push $N1054afb0
push $Nffe37e0
Group {
 name aPMatte_MAIN22
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0x1fff00ff
 label "GREEN\n25m\ndepth: \[value scaling.y]"
 selected true
 xpos -40
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{parent.aPMatte_MAIN20.radius}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness 0.35
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *25)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N120822e0 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N120d57b0 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N120d57b0
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N120f6ce0 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N120f6ce0
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N1212e170 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N120822e0
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N12150070 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N1212e170
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N12186d70 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N1218bdf0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N12190eb0 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N12195f50 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N1219aff0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N12195f50
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N1219aff0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N121f4290 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N122113a0 [stack 0]
push $N121f4290
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N1222b350 [stack 0]
push $N1218bdf0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N1222b350
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N122622b0 [stack 0]
push $N12190eb0
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N12284100 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N12284100
push $N122113a0
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N122c4490 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N122622b0
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N122c4490
push $N122622b0
push $N12186d70
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N12150070
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N12310000 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N1232f700 [stack 0]
push $N12310000
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N12344e10 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N1212e170
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N12360b50 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N12344e10
push $N1232f700
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N12360b50
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert25
 selected true
 xpos -40
 ypos -1767
}
push $Nffde790
Group {
 name aPMatte_MAIN5
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0x1fff00ff
 label "GREEN\n25m\ndistance: \[value radius]"
 selected true
 xpos 70
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{"lerp (aPMatte_MAIN2.radius, UnderWater_proxy_BG.dist + 20, UnderWater_proxy_BG.layer_dist) "}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N12451510 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N124a4a50 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N124a4a50
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N124c6010 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N124c6010
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N124fd410 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N12451510
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N1251f280 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N124fd410
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N12556030 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N1255b0b0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N12560120 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N12565210 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N1256a2b0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N12565210
 Shuffle {
  in {-P.red -P.green -P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N1256a2b0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N125c3570 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N125e0680 [stack 0]
push $N125c3570
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N125fa420 [stack 0]
push $N1255b0b0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N125fa420
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N12631080 [stack 0]
push $N12560120
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N12652f30 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N12652f30
push $N125e0680
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N126932c0 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N12631080
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N126932c0
push $N12631080
push $N12556030
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N1251f280
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N126dee30 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N126fe530 [stack 0]
push $N126dee30
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N12713930 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N124fd410
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N1272d650 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N12713930
push $N126fe530
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N1272d650
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation {{ChannelMerge_MAIN_OP.operation}}
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge55
 selected true
 xpos 70
 ypos -1773
}
Invert {
 channels alpha
 name Invert9
 tile_color 0x1fff00ff
 selected true
 xpos 70
 ypos -183
}
push $N10c0d010
push $N10c07f70
push $N10c02eb0
push $N10bf6f70
push $Nffcf4b0
Group {
 name aPMatte_MAIN24
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0x3fffff
 label "BLUE\n35m\ndepth: \[value scaling.y]"
 selected true
 xpos 950
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 shape "cusped box"
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{parent.aPMatte_MAIN20.radius}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.depth_mask_hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  scaling {1000 {"(UnderWater_proxy_BG.depth *35)/100000"} 1000}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N1282b1b0 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N1287e690 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N1287e690
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N1289fc40 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N1289fc40
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N128d7050 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N1282b1b0
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N128f8f50 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N128d7050
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N1292fc80 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N12934d00 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N12939dc0 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N1293edc0 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N12943ef0 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N1293edc0
 Shuffle {
  in {P.red P.green P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N12943ef0
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N1299d1b0 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N129ba2c0 [stack 0]
push $N1299d1b0
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {{parent.parent.UnderWater_proxy_BG.CamTrans} 0 {parent.parent.UnderWater_proxy_BG.CamTrans}}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N129d42a0 [stack 0]
push $N12934d00
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N129d42a0
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N12a0b1a0 [stack 0]
push $N12939dc0
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N12a2d050 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N12a2d050
push $N129ba2c0
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N12a6d390 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N12a0b1a0
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N12a6d390
push $N12a0b1a0
push $N1292fc80
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N128f8f50
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N12ab8f50 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N12ad8660 [stack 0]
push $N12ab8f50
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N12aeda40 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N128d7050
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N12b07760 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N12aeda40
push $N12ad8660
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N12b07760
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
Invert {
 channels alpha
 name Invert27
 selected true
 xpos 950
 ypos -1767
}
push $Nffca430
Group {
 name aPMatte_MAIN_MAX
 help "aPMatte v2.0 by Adrian Pueyo\n\nCreates a matte of different shapes, based on a Position pass. Includes transformation and falloff controls, and the option to output or overlay a Position 4D noise.\n\nv2.0 has the code more optimized, new available shapes and modes, includes a 3D-space view of the matte and point cloud, and accepts an Axis or Camera input. Also, lets you preview the p-matte over an image input and merge the alpha with the incoming one.\n\nadrianpueyo.com, 2017-2020"
 onCreate "n = nuke.thisNode()\n\nfor k in \[\"radius\",\"card_scale\",\"noise_size\"]:\n    n\[k].setFlag(0x00000004)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\n\nif kn in \['xpos','ypos','selected']:\n    pass\nelif kn == \"shape\":\n    ramp_on = k.value() in \['linear ramp', 'radial ramp']\n    n\['radius'].setVisible(not ramp_on)\n    n.knobs()\[\"black\"].setVisible(ramp_on)\n    n\[\"axis\"].setVisible(k.value()==\"plane\")\n    n\[\"card_scale\"].setVisible(k.getValue() in \[3,5] and n\[\"preview_in_3d\"].value())\n    picker = n.knobs()\[\"picker\"]\n    if ramp_on:\n        picker.setLabel(\"white\")\n    elif k.value() == \"plane\":\n        picker.setLabel(\"pivot\")\n    else:\n        picker.setLabel(\"center\")\n\n    # Connect Scene\n    sc = nuke.toNode(\"SceneGeo\")\n    kv = k.getValue()\n    if kv in \[0,1,2]:\n        sc.setInput(1,nuke.toNode(\"DotSphereCube\"))\n    elif kv in \[3,5]:\n        sc.setInput(1,nuke.toNode(\"DotPlanes\"))\n    else:\n        sc.setInput(1,nuke.toNode(\"DotRadialRamp\"))\n\nelif kn == \"use_axis\":\n    ianame = \"Inputaxis\"\n    if k.value():\n        a = nuke.toNode(\"AxisInput\")\n        if not nuke.exists(ianame):\n            ia = nuke.nodes.Input(name=ianame)\n            ia.setXYpos(a.xpos()-10,a.ypos()-60)\n            a.setInput(0,ia)\n    else:\n        if nuke.exists(ianame):\n            n.setInput(3,None)\n            ia = nuke.toNode(ianame)\n            nuke.delete(ia)\n\nelif kn == \"preview_in_3d\":\n    kv = k.value()\n    n.knobs()\[\"point_detail\"].setVisible(kv)\n    n.knobs()\[\"point_size\"].setVisible(kv)\n    n\[\"card_scale\"].setVisible(n\[\"shape\"].getValue() in \[3,5] and k.value())\n    nuke.toNode(\"RenderPC\").setInput(1,nuke.toNode(\"SceneGeo\") if kv else None)\nelif kn == \"noise\":\n    noise_on = k.value() != 'off'\n    for t in \['noise_rel','noise_persistance','noise_octaves','noise_lacunarity','noise_size','noise_offset','noise_add','noise_gain','noise_gamma','noise_mix']:\n        n\[t].setVisible(noise_on)\np_input = n.input(1) is not None\nn\[\"img_in\"].setEnabled(not p_input)\nn\[\"img_txt\"].setEnabled(not p_input)\nn.knobs()\[\"p_in\"].setEnabled(p_input)\nn.knobs()\[\"p_txt\"].setEnabled(p_input)\n"
 tile_color 0x3fffff
 label "BLUE\n35m\ndistance: \[value radius]"
 selected true
 xpos 1060
 ypos -1875
 addUserKnob {20 aPMatte}
 addUserKnob {26 position_from l "" +STARTLINE T " Position from:"}
 addUserKnob {26 img_txt l img T " "}
 addUserKnob {41 img_in l "" -STARTLINE T ShuffleInImg.in}
 addUserKnob {26 p_txt l "P (optional)" +DISABLED T " "}
 addUserKnob {41 p_in l "" -STARTLINE +DISABLED T ShuffleIn.in}
 addUserKnob {6 premultiplied +STARTLINE}
 premultiplied true
 addUserKnob {6 alpha_masking l "alpha masking" t "Multiply the output by the input's alpha." -STARTLINE}
 addUserKnob {26 text l "" +STARTLINE}
 addUserKnob {4 outChannels l output M {alpha rgba ""}}
 addUserKnob {6 mergeAlpha l "merge with input alpha" -STARTLINE}
 addUserKnob {41 Channeloperation l "" -STARTLINE T ChannelMerge1.operation}
 addUserKnob {6 preview l "preview over image" +STARTLINE}
 preview true
 addUserKnob {26 ""}
 addUserKnob {4 shape M {sphere "cusped box" "rounded box" "linear ramp" "radial ramp" plane}}
 addUserKnob {4 axis l "" -STARTLINE +HIDDEN M {X Y Z "" "" "" ""}}
 axis Y
 addUserKnob {6 mirrored -STARTLINE}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {41 picker l center T BlinkScriptPMatte.picker}
 addUserKnob {6 use_axis l "use axis" -STARTLINE}
 addUserKnob {7 radius R 0.1 1000}
 radius {{"lerp (aPMatte_MAIN2.radius, UnderWater_proxy_BG.dist + 30, UnderWater_proxy_BG.layer_dist) "}}
 addUserKnob {41 black t "Black point of your ramp." +HIDDEN T BlinkScriptPMatte.black_point}
 addUserKnob {26 ""}
 addUserKnob {6 preview_in_3d l "preview in 3d space" t "Recreates a 3D-space preview of the point cloud and the P-matte. After activating this, simply press the Tab key on the active viewer to change to 3D space." +STARTLINE}
 addUserKnob {41 point_detail l "point detail" +HIDDEN T PositionToPointsPC.detail}
 addUserKnob {41 point_size l "point size" +HIDDEN T PositionToPointsPC.pointSize}
 addUserKnob {7 card_scale l "card scale" +HIDDEN R 0 100}
 card_scale 100
 addUserKnob {26 ""}
 addUserKnob {4 falloff t "Fallof type for the matte." M {linear smooth quadratic cubic "inv. cubic" "" ""}}
 falloff cubic
 addUserKnob {7 hardness}
 hardness {{parent.UnderWater_proxy_BG.hardness}}
 addUserKnob {26 ""}
 addUserKnob {41 xform_order l "transform order" T Axis.xform_order}
 addUserKnob {41 rot_order l "rotation order" T Axis.rot_order}
 addUserKnob {41 translate T Axis.translate}
 addUserKnob {41 rotate T Axis.rotate}
 addUserKnob {41 scaling l scale T Axis.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis.uniform_scale}
 addUserKnob {41 skew T Axis.skew}
 addUserKnob {41 pivot +INVISIBLE T Axis.pivot}
 addUserKnob {22 reset_transformations l "  reset transformations  " T "a = nuke.toNode(\"Axis\")\na.readKnobs(\"xform_order SRT rot_order ZXY translate \{0 0 0\} rotate \{0 0 0\} scaling \{1 1 1\} uniform_scale 1 skew \{0 0 0\} pivot \{0 0 0\} useMatrix false\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 noise t "overlay: uses the noise in overlay blend mode over the resulting mask, to make it more organic and less obvious for grading.\nnoise only: ignore the mask, output a 4D noise." M {off overlay "noise only" ""}}
 addUserKnob {6 noise_rel l relative t "On: Pick world transformations and positioning of the shape.\nOff: Pick absolute world transformations.\n\nTip: Check when you want the mask to always be affected by the same noise, uncheck when you want to lock the noise to your scene." -STARTLINE +HIDDEN}
 noise_rel true
 addUserKnob {7 noise_size l size t "Size of the noise pattern." +HIDDEN R 0 100}
 noise_size 10
 addUserKnob {7 noise_offset l offset t "Spatial offset of the noise pattern (use to find a sweet spot for your matte)." +HIDDEN R 0 100}
 addUserKnob {3 noise_octaves l octaves t "Number of noise iterations." +HIDDEN}
 noise_octaves 8
 addUserKnob {7 noise_lacunarity l lacunarity t "Each octave gets downscaled by this value." +HIDDEN R 0 10}
 noise_lacunarity 1.8
 addUserKnob {7 noise_persistance l persistance t "Each octave gets multiplied by this value." +HIDDEN}
 noise_persistance 0.5
 addUserKnob {7 noise_add l add t "Add a value to the noise." +HIDDEN}
 noise_add 0.5
 addUserKnob {7 noise_gain l gain t "Multiply the resulting noise by this value." +HIDDEN R 0 4}
 noise_gain 1
 addUserKnob {7 noise_gamma l gamma t "Gamma the resulting value." +HIDDEN R 0 4}
 noise_gamma 0.3
 addUserKnob {7 noise_mix l mix +HIDDEN}
 noise_mix 1
 addUserKnob {26 version_author l " " t "aPMatte v2.0\n13 Feb 2020" T "<span style=\"color:#666\"><b>aPMatte v2.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2015-2020</span>"}
 addUserKnob {6 BlinkScriptPMatte_black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Axis2 {
  inputs 0
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked} {parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPicked
  xpos 211
  ypos 364
 }
 Axis2 {
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy1
  xpos 211
  ypos 430
 }
 Axis2 {
  translate {{parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans} {parent.parent.UnderWater_proxy_BG.CamTrans}}
  name Axis
  xpos 211
  ypos 496
 }
 Dot {
  name Dot18
  note_font_size 41
  xpos 235
  ypos 635
 }
set N12bf8150 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{sqrt(pow2(BlinkScriptPMatte.aPMatteKernel_picked.x-BlinkScriptPMatte.aPMatteKernel_pickedB.x)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.y-BlinkScriptPMatte.aPMatteKernel_pickedB.y)+pow2(BlinkScriptPMatte.aPMatteKernel_picked.z-BlinkScriptPMatte.aPMatteKernel_pickedB.z))}}
  name Axis2
  xpos 211
  ypos 870
 }
 Card2 {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  image_aspect false
  rows 1
  columns 1
  uniform_scale {{parent.card_scale}}
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name Card2
  xpos 617
  ypos 438
 }
 Dot {
  name Dot29
  note_font_size 41
  xpos 651
  ypos 484
 }
set N12c4b670 [stack 0]
 Dot {
  name Dot30
  note_font_size 41
  xpos 651
  ypos 537
 }
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere2
  xpos 709
  ypos 438
 }
 Dot {
  name Dot31
  note_font_size 41
  xpos 743
  ypos 563
 }
push $N12c4b670
 Cube {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 1
  columns 1
  cube {-1 -1 -1 1 1 1}
  name Cube1
  xpos 523
  ypos 438
 }
set N12c6cc60 [stack 0]
 Dot {
  name Dot20
  note_font_size 41
  xpos 591
  ypos 484
 }
push $N12c6cc60
 Sphere {
  inputs 0
  display wireframe
  selectable false
  render_mode off
  cast_shadow false
  receive_shadow false
  rows 6
  columns 6
  name Sphere1
  xpos 433
  ypos 438
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 467
  ypos 499
 }
 Switch {
  inputs 6
  which {{parent.shape}}
  name SwitchShapeGeo
  xpos 523
  ypos 559
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 557
  ypos 756
 }
set N12ca4070 [stack 0]
 Dot {
  name Dot28
  note_font_size 41
  xpos 331
  ypos 756
 }
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoRadius1
  xpos 297
  ypos 890
 }
 Dot {
  name DotRadialRamp
  label "\[value name]"
  note_font_size 12
  xpos 331
  ypos 922
 }
push $N12bf8150
 Dot {
  name Dot26
  note_font_size 41
  xpos 466
  ypos 635
 }
set N12cc5f80 [stack 0]
 Axis2 {
  display off
  selectable false
  uniform_scale {{parent.BlinkScriptPMatte.aPMatteKernel_radius}}
  name Axis1
  xpos 442
  ypos 868
 }
push $N12ca4070
 TransformGeo {
  inputs 2
  selectable false
  name TransformGeoAxis1
  selected true
  xpos 523
  ypos 888
 }
 Dot {
  name DotSphereCube
  label "\[value name]"
  note_font_size 12
  xpos 557
  ypos 967
 }
 Input {
  inputs 0
  name Inputimg
  xpos -528
  ypos 176
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos -494
  ypos 257
 }
set N12cfcc80 [stack 0]
 Dot {
  name Dot5
  note_font_size 41
  xpos -350
  ypos 257
 }
set N12d01cd0 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -240
  ypos 257
 }
set N12d06de0 [stack 0]
 Dot {
  name Dot6
  note_font_size 41
  xpos -157
  ypos 257
 }
set N12d0be80 [stack 0]
 Input {
  inputs 0
  name InputP
  xpos -73
  ypos 178
  number 1
 }
set N12d10f20 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 100
  ypos 182
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input0]"}}
  name SwitchAlpha
  label "\[value which]"
  xpos 66
  ypos 247
 }
 Dot {
  name Dot8
  xpos 100
  ypos 356
 }
push $N12d0be80
 Shuffle {
  in {-P.red -P.green -P.blue P.x}
  in2 rgba
  alpha alpha2
  name ShuffleInImg
  xpos -191
  ypos 296
 }
push $N12d10f20
 Shuffle {
  in2 rgba
  alpha alpha2
  name ShuffleIn
  xpos -73
  ypos 225
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch1
  label "\[value which]"
  xpos -73
  ypos 290
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -73
  ypos 346
  disable {{!parent.alpha_masking}}
 }
 Unpremult {
  name UnpremultP
  xpos -73
  ypos 384
  disable {{!parent.premultiplied}}
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos -39
  ypos 440
 }
set N12d6a1e0 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos -132
  ypos 440
 }
 Blur {
  channels rgba
  name Blur1
  xpos -166
  ypos 827
 }
 Input {
  inputs 0
  name Inputmask
  xpos -679
  ypos 579
  number 2
 }
 Dot {
  name Dot14
  note_font_size 41
  xpos -645
  ypos 795
 }
set N12d872f0 [stack 0]
push $N12d6a1e0
 BlinkScript {
  recompileCount 9
  ProgramGroup 1
  KernelDescription "2 \"aPMatteKernel\" iterate pixelWise ccf9f47b19e966f0f59161f3becf0189d1b2d3f9ee3837adfa2441f9df801783 2 \"p\" Read Point \"dst\" Write Point 21 \"picked\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"pickedB\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"m\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"radius\" Float 1 AAAAAA== \"shape\" Int 1 AAAAAA== \"invert_shape\" Int 1 AAAAAA== \"use_alpha\" Int 1 AAAAAA== \"mirrored\" Int 1 AAAAAA== \"falloff\" Int 1 AQAAAA== \"hardness\" Float 1 AAAAAA== \"use noise\" Int 1 AAAAAA== \"noise_relative\" Int 1 AAAAAA== \"noise octaves\" Int 1 CAAAAA== \"noise persistence\" Float 1 AAAAPw== \"lacunarity\" Float 1 AAAAQA== \"noise scale\" Float 1 CtcjPA== \"noise_offset\" Float 1 AAAAAA== \"noise_add\" Float 1 AAAAAA== \"noise_gain\" Float 1 AAAAAA== \"noise_gamma\" Float 1 AAAAAA== \"noise_mix\" Float 1 AAAAAA== 21 \"picked\" 3 1 \"pickedB\" 3 1 \"m\" 16 1 \"radius\" 1 1 \"shape\" 1 1 \"invert_shape\" 1 1 \"use_alpha\" 1 1 \"mirrored\" 1 1 \"falloff\" 1 1 \"hardness\" 1 1 \"use_noise\" 1 1 \"noise_relative\" 1 1 \"noise_octaves\" 1 1 \"noise_persistence\" 1 1 \"noise_lacunarity\" 1 1 \"noise_scale\" 1 1 \"noise_offset\" 1 1 \"noise_add\" 1 1 \"noise_gain\" 1 1 \"noise_gamma\" 1 1 \"noise_mix\" 1 1 0"
  kernelSource "// ----------------------------------------------------------------\n// aPMatte v1.0 by Adrian Pueyo\n//\n// Generate a matte of different shapes, based on a Position pass.\n// Includes options to transform the mask and change its falloff.\n// Also includes the option to output or overlay a P-based noise.\n//\n// adrianpueyo.com, 2017-2020\n// ----------------------------------------------------------------\n\n\n// Noise algorithm adapted by Adrian Pueyo from Noise4D function by Mads Hagbarth Lund\n// Noise4D function Ported by Mads Hagbarth Lund 2014\n// Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n  int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w, const float lacunarity=2 ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= lacunarity;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nkernel aPMatteKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> p;\n  Image<eWrite> dst;\n\n  param:\n    float3 picked; //Center, or white for ramps\n    float3 pickedB; //Black for ramps\n    float4x4 m; //Camera or axis matrix.\n    float radius;\n    int shape; //0=sphere,1=cusped box,2=rounded box,3=ramp, 4=rad.ramp\n    int invert_shape;\n    int use_alpha;\n    int mirrored;\n    int falloff; //0=linear,1=smooth,2=square,3=inv.square\n    float hardness;\n\n    // Noise parameters here\n    int use_noise; //0=off,1=overlay,2=noise only\n    int noise_relative;\n    int noise_octaves;\n    float noise_persistence;\n    float noise_lacunarity;\n    float noise_scale;\n    float noise_offset;\n    float noise_add;\n    float noise_gain;\n    float noise_gamma;\n    float noise_mix;\n\n  void define() \{\n    defineParam(falloff, \"falloff\", 1);\n    defineParam(use_noise, \"use noise\", 0);\n    defineParam(noise_octaves, \"noise octaves\", 8);\n    defineParam(noise_persistence, \"noise persistence\",  0.5f);\n    defineParam(noise_lacunarity, \"lacunarity\",  2.0f);\n    defineParam(noise_scale, \"noise scale\", 0.01f);\n  \}\n\n  inline float rad(float deg)\{ \n    return deg*PI/180;\n  \}\n\n  inline float smoothstep(float edge0, float edge1, float x)\{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0f, 1.0f);\n    return x*x*x*(x*(x*6-15)+10);\n  \}\n\n  inline float cl(float val)\{\n  return clamp(val,0.0f,1.0f); \n  \}\n\n\n  void process() \{\n    //1. P WORLD\n    // Center the coordinates\n    float3 color = float3(p(0)-picked.x,p(1)-picked.y,p(2)-picked.z);\n    int black = 0;\n\n    // Matrix!\n    float4x4 mi = m;\n    mi = mi.invert();\n    for(int c = 0; c<dst.kComps; c++)\{\n      color\[c] = mi\[c]\[0]*color\[0] + mi\[c]\[1]*color\[1] + mi\[c]\[2]*color\[2] + mi\[c]\[3]*1.0f;\n    \}\n\n    //2. SHAPES\n    float dist;\n    float result;\n\n    if(shape==0)\{//Sphere\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      result = radius==0.0f? 0:cl(1-dist/radius);\n    \} else if(shape==1)\{//Cusped Box\n      result = min( min( cl((radius-fabs(color.x))/radius) , cl((radius-fabs(color.y))/radius)) , cl((radius-fabs(color.z))/radius)) ;\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==2)\{//Rounded Box\n      result = radius==0.0f? 0: smoothstep(0,1-hardness, cl(1-fabs(float(color.x)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.y)/radius)) ) * smoothstep(0,1-hardness, cl(1-fabs(float(color.z)/radius)) );\n      result = hardness>=1? float(result>0) : result;\n    \} else if(shape==3)\{//Linear Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      float angWB = acos( clamp((pow(dist,2)-pow(distB,2)+pow(distWB,2))/(2*dist*distWB),-1.0f,1.0f) );\n      float cosAngWB = dist==0.0f? 0:cos(angWB);\n      result = distWB==0? 0.0f: cl((dist * cosAngWB) / distWB );\n      result = 1-result;\n    \} else if(shape==4)\{//Radial Ramp\n      dist = sqrt(pow(color\[0],2) + pow(color\[1],2) + pow(color\[2],2));\n      float distB = sqrt(pow(color\[0]-(pickedB.x-picked.x),2) + pow(color\[1]-(pickedB.y-picked.y),2) + pow(color\[2]-(pickedB.z-picked.z),2));\n      float distWB = sqrt(pow(pickedB.x-picked.x,2) + pow(pickedB.y-picked.y,2) + pow(pickedB.z-picked.z,2));\n      result = distWB==0? 0.0f: cl((dist) / distWB );\n      result = 1-result;\n    \}\n    result = mirrored ? result*(1-result)*4:result;\n    result = invert_shape? 1-result:result;\n\n    //3. FALLOFF\n    if(falloff==0)\{//Linear\n      result = hardness>=1? float(result>0) : cl(result/(1-hardness));\n    \}else if(falloff==1)\{//Smooth\n      result = hardness>=1? float(result>0) : smoothstep(0,1-hardness,result);\n    \}else if(falloff==2)\{//Quadratic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),2));\n    \}else if(falloff==3)\{//Cubic\n      result = hardness>=1? float(result>0) : cl(pow(float(result/(1-hardness)),3));\n    \}else if(falloff==4)\{//Inv. Cubic\n      result = hardness>=1? float(result>0) : 1-cl(pow(float(cl(1-(result/(1-hardness)))),3));\n    \}\n\n    //4. GENERATE NOISE\n    float noise;\n    if(use_noise!=0)\{//Avoid calculations if possible\n      if(noise_relative!=1)\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,p(0),p(1),p(2),noise_offset,noise_lacunarity);\n      \}else\{\n        noise = (float)octave_noise_4d(float(noise_octaves),noise_persistence,noise_scale==0?10000.0f:1/noise_scale,color\[0],color\[1],color\[2],noise_offset,noise_lacunarity);\n      \}\n      noise = cl(pow(max((noise+noise_add)*noise_gain,0.0f),noise_gamma==0?1:1/noise_gamma));\n    \}\n\n\n    //5. ALPHA MASK AND APPLY NOISE\n    result = max(result,0.0f); //Clamp negative values\n    if(use_noise==1)\{//Overlay\n      result = result<0.5f? noise_mix*(2*noise*result)+(1-noise_mix)*result : noise_mix*(1-2*(1-result)*(1-noise))+(1-noise_mix)*result;\n    \}else if(use_noise>=2)\{\n      result = noise*noise_mix;\n    \}\n\n    if(use_alpha > 0) result=result*p(3);\n\n    //6. WE'RE DONE\n    dst() = result;\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  aPMatteKernel_picked {{(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker} {(parent.shape==3&&parent.mirrored)?picker-(black_point-picker):(parent.shape==5&&parent.mirrored)?picker-radius:picker}}
  aPMatteKernel_pickedB {{parent.shape==5?parent.axis==0?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==1?picker+radius+0.0001:picker:black_point} {parent.shape==5?parent.axis==2?picker+radius+0.0001:picker+0.00001:black_point}}
  group_aPMatteKernel_m 1
  aPMatteKernel_m {
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
      {{parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix} {parent.AxisCopy.world_matrix}}
    }
  aPMatteKernel_radius {{parent.radius}}
  aPMatteKernel_shape {{parent.shape==5?3:parent.shape}}
  aPMatteKernel_invert_shape {{parent.invert}}
  aPMatteKernel_use_alpha {{parent.alpha_masking}}
  aPMatteKernel_mirrored {{parent.mirrored}}
  aPMatteKernel_falloff {{parent.falloff}}
  aPMatteKernel_hardness {{parent.hardness}}
  "aPMatteKernel_use noise" {{parent.noise}}
  aPMatteKernel_noise_relative {{parent.noise_rel}}
  "aPMatteKernel_noise octaves" {{parent.noise_octaves}}
  "aPMatteKernel_noise persistence" {{parent.noise_persistance}}
  aPMatteKernel_lacunarity {{parent.noise_lacunarity}}
  "aPMatteKernel_noise scale" {{parent.noise_size}}
  aPMatteKernel_noise_offset {{parent.noise_offset}}
  aPMatteKernel_noise_add {{parent.noise_add}}
  aPMatteKernel_noise_gain {{parent.noise_gain}}
  aPMatteKernel_noise_gamma {{parent.noise_gamma}}
  aPMatteKernel_noise_mix {{parent.noise_mix}}
  rebuild_finalise ""
  name BlinkScriptPMatte
  xpos -73
  ypos 489
  addUserKnob {20 User}
  addUserKnob {18 picker}
  picker {0 0 0}
  addUserKnob {6 picker_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 black_point l black}
  black_point {0 0 0}
  addUserKnob {6 black_point_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Dot {
  name Dot13
  note_font_size 41
  xpos -39
  ypos 629
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos -39
  ypos 696
 }
set N12da1020 [stack 0]
push $N12d01cd0
 ChannelMerge {
  inputs 2
  name ChannelMerge1
  xpos -384
  ypos 684
 }
push $N12da1020
 Dot {
  name Dot2
  note_font_size 41
  xpos -39
  ypos 733
 }
 Switch {
  inputs 2
  which {{parent.mergeAlpha}}
  name Switch2
  label "\[value which]"
  xpos -384
  ypos 726
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name ShuffleToRGBA
  tile_color 0xffffffff
  xpos -384
  ypos 832
 }
set N12dd7d10 [stack 0]
push $N12d06de0
 Merge2 {
  inputs 2+1
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  name Merge1
  label "\[ expr \{ \[value mix] == 1 ? \" \" : \[concat Mix: \[value mix]] \}]"
  xpos -274
  ypos 792
 }
 Dot {
  name Dot9
  xpos -240
  ypos 929
 }
set N12df9bd0 [stack 0]
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode off
  detail 1
  pointSize 1
  name PositionToPointsPC
  xpos -166
  ypos 925
  disable {{!parent.preview_in_3d}}
 }
 Scene {
  inputs 2
  name SceneGeo
  xpos -156
  ypos 983
  disable {{!parent.preview_in_3d}}
 }
 ScanlineRender {
  inputs 0
  conservative_shader_sampling false
  motion_vectors_type distance
  name RenderPC
  xpos -166
  ypos 1102
  disable {{!parent.preview_in_3d}}
 }
 Dot {
  name Dot17
  note_font_size 41
  xpos -132
  ypos 1172
 }
push $N12df9bd0
push $N12d872f0
 Dot {
  name Dot12
  note_font_size 41
  xpos -645
  ypos 835
 }
set N12e39f60 [stack 0]
 Dot {
  name Dot11
  note_font_size 41
  xpos -645
  ypos 878
 }
push $N12dd7d10
 Dot {
  name Dot10
  note_font_size 41
  xpos -350
  ypos 878
 }
push $N12e39f60
push $N12dd7d10
push $N12cfcc80
 Copy {
  inputs 2+1
  from0 rgba.alpha
  to0 rgba.alpha
  name CopyA
  xpos -528
  ypos 828
 }
 Copy {
  inputs 2+1
  channels rgb
  name CopyRGB
  xpos -528
  ypos 866
  disable {{parent.outChannels==0}}
 }
 Copy {
  inputs 2
  channels rgb
  name CopyPreview
  xpos -528
  ypos 917
  disable {{!parent.preview}}
 }
 Dissolve {
  inputs 2
  channels rgba
  name DissolvePC
  xpos -528
  ypos 1168
  disable {{!parent.preview_in_3d}}
 }
 Output {
  name Output
  xpos -528
  ypos 1254
 }
push $N12cc5f80
 Dot {
  name Dot27
  note_font_size 41
  xpos 691
  ypos 635
 }
set N12e87ac0 [stack 0]
 Dot {
  name Dot24
  note_font_size 41
  xpos 994
  ypos 635
 }
 Axis2 {
  display off
  selectable false
  translate {{-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked} {-parent.BlinkScriptPMatte.aPMatteKernel_picked}}
  name AxisPickedReversed
  xpos 970
  ypos 719
 }
 Axis2 {
  display off
  selectable false
  translate {{parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB} {parent.BlinkScriptPMatte.aPMatteKernel_pickedB}}
  name AxisPickedBlack1
  xpos 970
  ypos 785
 }
set N12ea71d0 [stack 0]
push $N12e87ac0
 Axis2 {
  display off
  selectable false
  name AxisWhite
  xpos 667
  ypos 795
 }
set N12ebc5c0 [stack 0]
 Dot {
  name Dot34
  note_font_size 41
  xpos 691
  ypos 914
 }
push $N12ca4070
 Dot {
  name Dot23
  note_font_size 41
  xpos 783
  ypos 756
 }
set N12ed62e0 [stack 0]
 TransformGeo {
  inputs 3
  selectable false
  name TransformGeoWhite
  xpos 749
  ypos 910
 }
push $N12ebc5c0
push $N12ea71d0
 Dot {
  name Dot33
  note_font_size 41
  xpos 994
  ypos 913
 }
push $N12ed62e0
 Dot {
  name Dot32
  note_font_size 41
  xpos 909
  ypos 756
 }
 TransformGeo {
  inputs 3
  name TransformGeo1
  xpos 875
  ypos 909
 }
 Dot {
  name Dot19
  note_font_size 41
  xpos 909
  ypos 940
 }
 MergeGeo {
  inputs 2
  selectable false
  name MergeGeo2
  xpos 749
  ypos 936
 }
 Dot {
  name DotPlanes
  label "\[value name]"
  note_font_size 12
  xpos 783
  ypos 1011
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  useMatrix true
  matrix {
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
      {{parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix} {parent.AxisInput.world_matrix}}
    }
  name AxisInputCopy2
  xpos 102
  ypos 428
 }
 Axis2 {
  display off
  useMatrix true
  matrix {
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
      {{parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix} {parent.Axis.matrix}}
    }
  name AxisCopy
  xpos 102
  ypos 494
 }
 Axis2 {
  inputs 0
  display off
  selectable false
  name AxisInput
  xpos 333
  ypos 432
 }
end_group
ChannelMerge {
 inputs 2
 operation {{ChannelMerge_MAIN_OP.operation}}
 mix {{parent.UnderWater_proxy_BG.depth_mix}}
 name ChannelMerge56
 selected true
 xpos 1060
 ypos -1773
}
Invert {
 channels alpha
 name Invert10
 tile_color 0x3fffff
 selected true
 xpos 1060
 ypos -1503
}
push $Nff91b40
Unpremult {
 name Unpremult61
 selected true
 xpos 1500
 ypos -2025
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 1 1 1 1 x5 0 x6 1}
   lum {curve 1 1 1 1 1 x6 1}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect4
 tile_color 0x3fffff
 label BLUE
 selected true
 xpos 1500
 ypos -1503
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 1 1 1 x4 0 1}
   lum {curve 1 1 1 1 x5 1 x6 1}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect3
 tile_color 0xffffff
 label CYAN
 selected true
 xpos 1500
 ypos -1143
}
Grade {
 inputs 1+1
 black {{parent.UnderWater_proxy_BG.far_lift}}
 name Grade12
 label "FAR LIFT"
 selected true
 xpos 1500
 ypos -1047
}
ColorLookup {
 inputs 1+1
 channels rgb
 lut {master {}
   red {curve C 0 0.3}
   green {curve C 0 1.2}
   blue {curve C 0 1.2}
   alpha {}}
 mix {{parent.UnderWater_proxy_BG.blueSpectrum}}
 name ColorLookup_BLUE
 tile_color 0xff005fff
 label "BLUE SPECTRUM"
 selected true
 xpos 1500
 ypos -975
}
Log2Lin {
 operation lin2log
 name Log2Lin3
 selected true
 xpos 1500
 ypos -873
}
Soften {
 inputs 1+1
 channels rgb
 amount {{parent.UnderWater_proxy_BG.far_soften}}
 size 100
 name Soften2
 label "Far Amount: \[value amount]\n"
 selected true
 xpos 1500
 ypos -831
}
Log2Lin {
 name Log2Lin4
 selected true
 xpos 1500
 ypos -777
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 1 1 1 0 1 1 1}
   lum {curve 1 1 1 x4 1 x5 1 1}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect5
 tile_color 0x1fff00ff
 label GREEN
 selected true
 xpos 1500
 ypos -183
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 1 1 0 1 1 1 1}
   lum {curve 1 1 x3 1 x4 1 1 1}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect6
 tile_color 0xdfff00ff
 label YELLOW
 selected true
 xpos 1500
 ypos 201
}
Grade {
 inputs 1+1
 black {{parent.UnderWater_proxy_BG.mid_lift}}
 name Grade13
 label "MID LIFT"
 selected true
 xpos 1500
 ypos 393
}
ColorLookup {
 inputs 1+1
 channels rgb
 lut {master {}
   red {curve C 0 0.7}
   green {curve C 0 0.9}
   blue {}
   alpha {}}
 mix {{parent.UnderWater_proxy_BG.greenSpectrum}}
 name ColorLookup_GREEN
 tile_color 0xff005fff
 label "GREEN SPECTRUM"
 selected true
 xpos 1500
 ypos 489
}
Log2Lin {
 operation lin2log
 name Log2Lin1
 selected true
 xpos 1500
 ypos 591
}
Soften {
 inputs 1+1
 channels rgb
 amount {{parent.UnderWater_proxy_BG.mid_soften}}
 size 100
 name Soften3
 label "Mid Amount: \[value amount]"
 selected true
 xpos 1500
 ypos 633
}
Log2Lin {
 name Log2Lin2
 selected true
 xpos 1500
 ypos 687
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 1 1 x1.5 0 1 x3 1 1 1 1}
   lum {}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect7
 tile_color 0xff5f00ff
 label ORANGE
 selected true
 xpos 1500
 ypos 1113
}
HueCorrect {
 inputs 1+1
 hue {sat {curve 0.5 0 1 1 1 1 1}
   lum {curve x2 1 1 1 1 1}
   red {}
   green {}
   blue {}
   r_sup {}
   g_sup {}
   b_sup {}
   sat_thrsh {}}
 mix {{1-parent.UnderWater_proxy_BG.saturation}}
 name HueCorrect8
 tile_color 0xff0000ff
 label RED
 selected true
 xpos 1500
 ypos 1593
}
Grade {
 inputs 1+1
 black {{parent.UnderWater_proxy_BG.close_lift}}
 name Grade15
 label "CLOSE LIFT"
 selected true
 xpos 1500
 ypos 1929
}
Log2Lin {
 operation lin2log
 name Log2Lin7
 selected true
 xpos 1500
 ypos 2007
}
Soften {
 inputs 1+1
 channels rgb
 amount {{parent.UnderWater_proxy_BG.close_soften}}
 size 100
 name Soften4
 label "Close Amount: \[value amount]"
 selected true
 xpos 1500
 ypos 2049
}
Log2Lin {
 name Log2Lin8
 selected true
 xpos 1500
 ypos 2103
}
CopyBBox {
 inputs 2
 name CopyBBox1
 selected true
 xpos 1500
 ypos 2295
}
Premult {
 name Premult62
 selected true
 xpos 1500
 ypos 2535
}
Constant {
 inputs 0
 channels rgb
 color 0.18
 name Constant1
 label "Res: \[value width] * \[value height]"
 selected true
 xpos 2380
 ypos 2290
}
Merge2 {
 inputs 2
 name Merge1
 selected true
 xpos 2380
 ypos 2535
}
push $cut_paste_input
NoOp {
 name UnderWater_proxy_BG
 note_font_size 41
 selected true
 xpos 620
 ypos -2591
 addUserKnob {20 User}
 addUserKnob {26 instruction l "" +STARTLINE T "<p style=\"font-size:15px\">Drag & Drop here the Camera's Translate     values here </p>"}
 addUserKnob {26 space_1 l "" +STARTLINE T "   "}
 addUserKnob {13 CamTrans l "Cam Translate"}
 CamTrans {{parent.Camera3.translate} {parent.Camera3.translate} {parent.Camera3.translate}}
 addUserKnob {26 ""}
 addUserKnob {7 dist l "Distance (m)" R 0 5000}
 dist 8
 addUserKnob {7 layer_dist l "Layer Distance" R 0 2}
 layer_dist 0.5
 addUserKnob {7 hardness l "Mask Hardness"}
 hardness 0.3
 addUserKnob {26 ""}
 addUserKnob {7 saturation l Saturation}
 saturation 1
 addUserKnob {26 ""}
 addUserKnob {7 blueSpectrum l "Blue Spectrum"}
 blueSpectrum 1
 addUserKnob {7 greenSpectrum l "Green Spectrum"}
 greenSpectrum 1
 addUserKnob {26 ""}
 addUserKnob {7 far_soften l "Far Soften"}
 far_soften 0.6
 addUserKnob {7 mid_soften l "Mid Soften"}
 mid_soften 0.5
 addUserKnob {7 close_soften l "Close Soften"}
 close_soften 0.3
 addUserKnob {26 ""}
 addUserKnob {19 far_lift l "Far Lift"}
 far_lift 0.003
 addUserKnob {6 far_lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 mid_lift l "Mid Lift"}
 mid_lift 0.001
 addUserKnob {6 mid_lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 close_lift l "Close Lift"}
 close_lift {0 0 0 0}
 addUserKnob {6 close_lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {7 depth l "Depth (m)" R 0 5000}
 depth 10000
 addUserKnob {7 depth_mask_hardness l "Mask Hardness"}
 depth_mask_hardness 0.35
 addUserKnob {7 depth_mix l "Depth Mix"}
 depth_mix 1
}
push $N1cfed900
Shuffle2 {
 fromInput1 {{0} B}
 in1 P
 fromInput2 {{0} B}
 mappings "4 P.red 0 0 rgba.red 0 0 P.green 0 1 rgba.green 0 1 P.blue 0 2 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
 name Shuffle1
 label "\[value in1]"
 selected true
 xpos 1060
 ypos -2607
}
push $N1cfed900
PositionToPoints2 {
 inputs 2
 name PositionToPoints1
 selected true
 xpos 1060
 ypos -2505
}
set Nfe3b810 [stack 0]
Camera3 {
 inputs 0
 translate {0 0.8 7}
 name Camera3
 selected true
 xpos 960
 ypos -2526
}
set Nb89be00 [stack 0]
Scene {
 inputs 2
 name Scene1
 label "Display: \[string toupper \[value display]]\nRender: \[string toupper \[value render_mode]]"
 selected true
 xpos 960
 ypos -2670
}
push $Nb89be00
push $Nfe3b810
push 0
ScanlineRender {
 inputs 3
 conservative_shader_sampling false
 shutteroffset centred
 motion_vectors_type distance
 name ScanlineRender1
 selected true
 xpos 950
 ypos -2385
}
